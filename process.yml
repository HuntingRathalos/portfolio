# Orb 'circleci/aws-ecr@6.12.2' resolved to 'circleci/aws-ecr@6.12.2'
version: 2
jobs:
  backend_test:
    docker:
    - image: cimg/php:8.0.13
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - composer-v1-{{ checksum "~/repo/api/composer.lock" }}
        - composer-v1-
        working_directory: ~/repo/api
    - run:
        command: composer install -n --prefer-dist
        working_directory: ~/repo/api
    - save_cache:
        key: composer-v1-{{ checksum "~/repo/api/composer.lock" }}
        paths:
        - ~/repo/api/vendor
        working_directory: ~/repo/api
    - run:
        name: php test
        command: vendor/bin/phpunit
        working_directory: ~/repo/api
  build_and_push_image_backend_nginx:
    machine:
      image: ubuntu-2004:202201-02
    steps:
    - checkout
    - run:
        command: |
          AWS_VER_REGEXP_2='aws-cli\/2.\d*.\d*'
          AWS_VER_REGEXP_1='aws-cli\/1.\d*.\d*'
          # initialize installed version to zero, to signify not installed (Or we want to ignore the installed version and re-install).
          AWS_CLI_INSTALLED_VERSION="0"
          AWS_CLI_VERSION_SELECTED="2"

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ "false" == "false" ]; then
              if ! command -v aws --version >/dev/null 2>&1  ; then
                  echo AWS is not installed
              else
                  echo AWS is currently installed.
                  if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
                      echo AWS CLI v2 is installed
                      AWS_CLI_INSTALLED_VERSION="2"
                  fi
                  if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_1; then
                      echo AWS CLI v1 is installed
                      AWS_CLI_INSTALLED_VERSION="1"
                  fi
              fi
          else
              echo "Skipping version check. Installing CLI"
          fi

          AWS_V2_UPDATE_PARAM=""
          if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
              AWS_V2_UPDATE_PARAM="--update"
          fi

          #If the desired version of the CLI is not installed, install it.
          if [[ $AWS_CLI_VERSION_SELECTED != $AWS_CLI_INSTALLED_VERSION ]]; then

              #uninstall AWS CLI if it is installed.
              if which aws; then
                  echo Uninstalling old CLI
                  $SUDO rm -rf $(which aws)
              fi
              case $AWS_CLI_VERSION_SELECTED in
                  "1")
                      if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1 ; then
                          echo "Your environment does not seem to have Python installed, a requirement of the AWS CLI."
                          echo "Please either utilize the AWS CLI v2, or select an envionment with Python installed."
                          echo "Recommended image: cimg:/python:3.8"
                          exit 1
                      fi
                      # install CLI v1
                      export PIP=$(which pip pip3 | head -1)
                      if [[ -n $PIP ]]; then
                          if which sudo > /dev/null; then
                              sudo $PIP install awscli --upgrade
                          else
                              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                              $PIP install awscli --upgrade --user
                          fi
                      elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
                          cd
                          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
                          unzip awscli-bundle.zip
                          if which sudo > /dev/null; then
                              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
                          else
                              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                              awscli-bundle/install -b ~/bin/aws
                          fi
                          rm -rf awscli-bundle*
                          cd -
                      else
                          echo "Unable to install AWS CLI. Please install pip."
                          exit 1
                      fi
                      # Installation check
                      if aws --version &> grep -q "aws-cli/1"; then
                          echo "AWS CLI V1 has been installed successfully"
                          exit 0
                      else
                          echo "There was an issue installing the AWS CLI V1. Exiting."
                          exit 1
                      fi
                  ;;
                  "2")
                      # install CLI v2

                      cd /tmp || exit

                      # PLATFORM CHECK: mac vs. alpine vs. other linux
                      if uname -a | grep Darwin; then
                          SYS_ENV_PLATFORM=darwin
                      elif uname -a | grep Linux; then
                          SYS_ENV_PLATFORM=linux
                      else
                          echo "This platform appears to be unsupported."
                          uname -a
                          exit 1
                      fi

                      case $SYS_ENV_PLATFORM in
                          linux)
                              curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                              unzip awscliv2.zip
                              $SUDO ./aws/install $AWS_V2_UPDATE_PARAM
                              rm awscliv2.zip
                              ;;
                          darwin)
                              curl -sSL "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
                              $SUDO installer -pkg AWSCLIV2.pkg -target /
                              rm AWSCLIV2.pkg
                              ;;
                          *)
                              echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                              echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                              exit 1
                          ;;
                      esac
                      # Installation check
                      if aws --version &> grep -q "aws-cli/2"; then
                          echo "AWS CLI V2 has been installed successfully"
                          exit 0
                      else
                          echo "There was an issue installing the AWS CLI V2. Exiting."
                          exit 1
                      fi
                  ;;
              esac

          else
              echo "The v${AWS_CLI_VERSION_SELECTED} AWS CLI is already installed."
              exit 0
          fi
        name: Install AWS CLI v2
    - run:
        command: |
          if [ -z "${AWS_PAGER}" ]; then
            echo 'export AWS_PAGER=""' >> $BASH_ENV
            echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
            echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
          fi
        name: Disable AWS pager if not already configured
    - run:
        command: |
          aws configure set aws_access_key_id \
            $AWS_ACCESS_KEY_ID \
            --profile default
        name: Configure AWS Access Key ID
    - run:
        command: |
          aws configure set aws_secret_access_key \
            $AWS_SECRET_ACCESS_KEY \
            --profile default
        name: Configure AWS Secret Access Key
    - run:
        command: |
          aws configure set default.region $AWS_REGION \
            --profile default
        name: Configure AWS default region
    - run:
        command: |
          # get-login-password returns a password that we pipe to the docker login command
          aws ecr get-login-password --region $AWS_REGION --profile default | docker login --username AWS --password-stdin $AWS_ACCOUNT_URL
        name: Log into Amazon ECR
    - run:
        command: |
          registry_id=$(echo $AWS_ACCOUNT_URL | sed "s;\..*;;g")
          number_of_tags_in_ecr=0

          docker_tag_args=""
          IFS="," read -ra DOCKER_TAGS <<< "latest"
          for tag in "${DOCKER_TAGS[@]}"; do
            if [ "false" = "true" ]; then
              docker_tag_exists_in_ecr=$(aws ecr describe-images --registry-id $registry_id --repository-name REPOSITORY_NGINX --query "contains(imageDetails[].imageTags[], '$tag')")
              if [ "$docker_tag_exists_in_ecr" = "true" ]; then
                docker pull $AWS_ACCOUNT_URL/REPOSITORY_NGINX:${tag}
                let "number_of_tags_in_ecr+=1"
              fi
            fi
            docker_tag_args="$docker_tag_args -t $AWS_ACCOUNT_URL/REPOSITORY_NGINX:$tag"
          done
          if [ "false" = "false" ] || [ "false" = "true" -a $number_of_tags_in_ecr -lt ${#DOCKER_TAGS[@]} ]; then
            docker build \
               \
              -f ./docker/nginx//Dockerfile.prod \
              $docker_tag_args \
              ./docker/nginx/
          fi
        name: Build docker image
        no_output_timeout: 10m
    - run:
        command: |
          IFS="," read -ra DOCKER_TAGS <<< "latest"
          for tag in "${DOCKER_TAGS[@]}"; do
            docker push $AWS_ACCOUNT_URL/REPOSITORY_NGINX:${tag}
          done
        name: Push image to Amazon ECR
workflows:
  push-branch-workflow:
    jobs:
    - backend_test
  deploy:
    jobs:
    - build_and_push_image_backend_nginx
  version: 2

# Original config.yml file:
# version: 2.1
# 
# orbs:
#   aws-ecr: circleci/aws-ecr@6.12.2
#   # aws-ecs: circleci/aws-ecs@1.3.0
#   # aws-s3: circleci/aws-s3@3.0.0
# 
# executors:
#   backend_test:
#     docker:
#       - image: cimg/php:8.0.13
# 
#       # jobs\u306B\u66F8\u3044\u3066\u3082\u3044\u3044\u304B\u3082
#     working_directory: ~/repo
# 
#   # front_build_and_deploy:
#   #   docker:
#   #     - image: circleci/node:14
#   #     - image: circleci/python:3.6-jessie
# 
#   #     # jobs\u306B\u66F8\u3044\u3066\u3082\u3044\u3044\u304B\u3082
#   #   working_directory: ~/repo
# 
# commands:
#   backend_test:
#     steps:
#       - checkout
# 
#       - restore_cache:
#           keys:
#             - composer-v1-{{ checksum \"~/repo/api/composer.lock\" }}
#             - composer-v1-
#           working_directory: ~/repo/api
# 
#       - run:
#           command: composer install -n --prefer-dist
#           working_directory: ~/repo/api
# 
#       - save_cache:
#           key: composer-v1-{{ checksum \"~/repo/api/composer.lock\" }}
#           paths:
#             - ~/repo/api/vendor
#           working_directory: ~/repo/api
# 
#       - run:
#           name: php test
#           command: vendor/bin/phpunit
#           working_directory: ~/repo/api
# 
#   # front_build:
#   #   steps:
#   #     - checkout
# 
#   #     - restore_cache:
#   #         keys:
#   #           - dependencies-v1-{{ checksum \"~/repo/front/package.json\" }}
#   #           - dependencies-v1-
#   #         working_directory: ~/repo/front
#   #     - run:
#   #         name: install-packages
#   #         command: npm install
#   #         working_directory: ~/repo/front
#   #     - save_cache:
#   #         key: dependencies-v1-{{ checksum \"~/repo/front/package.json\" }}
#   #         paths:
#   #           - ~/repo/front/node_modules
#   #         working_directory: ~/repo/front
#   #     - run:
#   #         name: Build Step
#   #         command: npm run generate-prod
#   #         working_directory: ~/repo/front
#   #     - persist_to_workspace:
#   #         root: ~/repo/front
#   #         paths:
#   #           - dist
# 
#   # front_deploy:
#   #   steps:
#   #     - attach_workspace:
#   #         at: ~/repo/front
#   #     - aws-s3/sync:
#   #         from: ./dist
#   #         to: $BUCKET_URL
# 
# jobs:
#   backend_test:
#     executor: backend_test
#     steps:
#       - backend_test
#   # front_build:
#   #   executor: front_build_and_deploy
#   #   steps:
#   #     - front_build
#   # front_deploy:
#   #   executor: front_build_and_deploy
#   #   steps:
#   #     - front_deploy
# 
#   build_and_push_image_backend_nginx:
#     machine:
#       image: ubuntu-2004:202201-02
#     steps:
#       # - checkout
#       - aws-ecr/build-and-push-image:
#           account-url: AWS_ACCOUNT_URL
#           repo: REPOSITORY_NGINX
#           region: AWS_REGION
#           dockerfile: Dockerfile.prod
#           # tag: \"${CIRCLE_SHA1}\"
#           path: ./docker/nginx/
#   build_and_push_image_backend_php:
#     machine:
#       image: ubuntu-2004:202201-02
#     steps:
#       - checkout
#       - aws-ecr/build-and-push-image:
#           account-url: AWS_ACCOUNT_URL
#           repo: REPOSITORY_PHP
#           region: AWS_REGION
#           dockerfile: Dockerfile.prod
#           # tag: \"${CIRCLE_SHA1}\"
#           path: ./docker/php/
# 
# workflows:
#   push-branch-workflow:
#     jobs:
#       - backend_test:
#           name: \"backend_test\"
#   deploy:
#     jobs:
#       - build_and_push_image_backend_nginx:
#           name: \"build_and_push_image_backend_nginx\"
#       # - build_and_push_image_backend_php:
#       # - front_build:
#       # - front_deploy:
#       # - aws-ecs/deploy-service-update:
#       #     requires:
#       #       - build_and_push_image_backend_nginx
#       #       - build_and_push_image_backend_php
#       #     family: \"portfolio_task\"
#       #     service-name: \"portfolio\"
#       #     cluster-name: \"portfolio-cluster\"
#       #     container-image-name-updates: \"container=portfolio_nginx,tag=${CIRCLE_SHA1}\"
#       #     filters:
#       #       branches:
#       #         only: main
#       # - aws-ecs/deploy-service-update:
#       #     requires:
#       #       - build_and_push_image_backend_nginx
#       #       - build_and_push_image_backend_php
#       #     family: \"portfolio_task\"
#       #     service-name: \"portfolio\"
#       #     cluster-name: \"portfolio-cluster\"
#       #     container-image-name-updates: \"container=portfolio_php,tag=${CIRCLE_SHA1}\"
#       #     filters:
#       #       branches:
#       #         only: main
# 
# 
# 
# # workflows:
# #   version: 2
# #   test:
# #     jobs:
# #       - test_backend:
#           # filters:
#           #   branches:
#           #     ignore: main