# Orb 'circleci/aws-ecr@6.12.2' resolved to 'circleci/aws-ecr@6.12.2'
# Orb 'circleci/aws-ecs@1.3.0' resolved to 'circleci/aws-ecs@1.3.0'
# Orb 'circleci/aws-s3@3.0.0' resolved to 'circleci/aws-s3@3.0.0'
version: 2
jobs:
  backend_test:
    docker:
    - image: cimg/php:8.0.13
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - composer-v1-{{ checksum "~/repo/api/composer.lock" }}
        - composer-v1-
        working_directory: ~/repo/api
    - run:
        command: composer install -n --prefer-dist
        working_directory: ~/repo/api
    - save_cache:
        key: composer-v1-{{ checksum "~/repo/api/composer.lock" }}
        paths:
        - ~/repo/api/vendor
        working_directory: ~/repo/api
    - run:
        name: php test
        command: vendor/bin/phpunit
        working_directory: ~/repo/api
  front_build:
    docker:
    - image: cimg/node:14.19.2
    - image: circleci/python:3.6-jessie
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - dependencies-v1-{{ checksum "~/repo/front/package.json" }}
        - dependencies-v1-
        working_directory: ~/repo/front
    - run:
        name: install-packages
        command: npm install
        working_directory: ~/repo/front
    - save_cache:
        key: dependencies-v1-{{ checksum "~/repo/front/package.json" }}
        paths:
        - ~/repo/front/node_modules
        working_directory: ~/repo/front
    - run:
        name: Build Step
        command: npm run generate-prod
        working_directory: ~/repo/front
    - persist_to_workspace:
        root: ~/repo/front
        paths:
        - dist
  front_deploy:
    docker:
    - image: cimg/node:14.19.2
    - image: circleci/python:3.6-jessie
    working_directory: ~/repo
    steps:
    - attach_workspace:
        at: ~/repo/front
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ ! "$(which aws)" ] || [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              # setup
              if [ ! "$PARAM_AWS_CLI_VERSION" = "latest" ]; then export AWS_CLI_VER_STRING="-$PARAM_AWS_CLI_VERSION"; fi

              # Uninstall existing AWS CLI if override is enabled.
              if [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                  AWS_CLI_PATH=$(which aws)
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi

              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi
              echo "Platform $SYS_ENV_PLATFORM"
              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2${AWS_CLI_VER_STRING}.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64${AWS_CLI_VER_STRING}.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install
                  rm awscliv2.zip
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
              ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >> "$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: |-
          PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
          PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
          PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

          aws configure set aws_access_key_id \
              "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          aws configure set aws_secret_access_key \
              "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

          if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
              aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
              aws configure set region "$PARAM_AWS_CLI_REGION" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi

          if [ -n "$PARAM_AWS_CLI_ROLE_ARN" ]; then
              aws configure set role_arn "$PARAM_AWS_CLI_ROLE_ARN" \
                  --profile "$PARAM_AWS_CLI_PROFILE_NAME"
          fi
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_REGION
          PARAM_AWS_CLI_ROLE_ARN: ''
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - deploy:
        command: "aws s3 sync \\\n  ~/repo/front/dist $BUCKET_URL \n"
        name: S3 Sync
workflows:
  backend_test:
    jobs:
    - backend_test
  front_build_and_deploy:
    jobs:
    - front_build
    - front_deploy:
        requires:
        - front_build
  version: 2

# Original config.yml file:
# version: 2.1
# 
# orbs:
#   aws-ecr: circleci/aws-ecr@6.12.2
#   aws-ecs: circleci/aws-ecs@1.3.0
#   aws-s3: circleci/aws-s3@3.0.0
# 
# executors:
#   backend_test:
#     docker:
#       - image: cimg/php:8.0.13
#     working_directory: ~/repo
# 
#   front_build_and_deploy:
#     docker:
#       - image: cimg/node:14.19.2
#       - image: circleci/python:3.6-jessie
#     working_directory: ~/repo
# 
# commands:
#   backend_test:
#     steps:
#       - checkout
# 
#       - restore_cache:
#           keys:
#             - composer-v1-{{ checksum \"~/repo/api/composer.lock\" }}
#             - composer-v1-
#           working_directory: ~/repo/api
# 
#       - run:
#           command: composer install -n --prefer-dist
#           working_directory: ~/repo/api
# 
#       - save_cache:
#           key: composer-v1-{{ checksum \"~/repo/api/composer.lock\" }}
#           paths:
#             - ~/repo/api/vendor
#           working_directory: ~/repo/api
# 
#       - run:
#           name: php test
#           command: vendor/bin/phpunit
#           working_directory: ~/repo/api
# 
#   front_build:
#     steps:
#       - checkout
# 
#       - restore_cache:
#           keys:
#             - dependencies-v1-{{ checksum \"~/repo/front/package.json\" }}
#             - dependencies-v1-
#           working_directory: ~/repo/front
#       - run:
#           name: install-packages
#           command: npm install
#           working_directory: ~/repo/front
#       - save_cache:
#           key: dependencies-v1-{{ checksum \"~/repo/front/package.json\" }}
#           paths:
#             - ~/repo/front/node_modules
#           working_directory: ~/repo/front
#       - run:
#           name: Build Step
#           command: npm run generate-prod
#           working_directory: ~/repo/front
#       - persist_to_workspace:
#           root: ~/repo/front
#           paths:
#             - dist
# 
#   front_deploy:
#     steps:
#       - attach_workspace:
#           at: ~/repo/front
#       - aws-s3/sync:
#           from: ~/repo/front/dist
#           to: $BUCKET_URL
# 
# jobs:
#   backend_test:
#     executor: backend_test
#     steps:
#       - backend_test
#   front_build:
#     executor: front_build_and_deploy
#     steps:
#       - front_build
#   front_deploy:
#     executor: front_build_and_deploy
#     steps:
#       - front_deploy
# 
#   # build_and_push_image_backend_nginx:
#   #   machine:
#   #     image: ubuntu-2004:202201-02
#   #   steps:
#   #     - checkout
#   #     - aws-ecr/build-and-push-image:
#   #         account-url: AWS_ACCOUNT_URL
#   #         repo: \"${REPOSITORY_NGINX}\"
#   #         region: AWS_REGION
#   #         dockerfile: ./docker/nginx/Dockerfile.prod
#   #         tag: \"${CIRCLE_SHA1}\"
# 
#   # build_and_push_image_backend_php:
#   #   machine:
#   #     image: ubuntu-2004:202201-02
#   #   steps:
#   #     - checkout
#   #     - aws-ecr/build-and-push-image:
#   #         account-url: AWS_ACCOUNT_URL
#   #         repo: \"${REPOSITORY_PHP}\"
#   #         region: AWS_REGION
#   #         dockerfile: ./docker/php/Dockerfile.prod
#   #         tag: \"${CIRCLE_SHA1}\"
# 
# workflows:
#   backend_test:
#     jobs:
#       - backend_test:
#           name: \"backend_test\"
#   front_build_and_deploy:
#     jobs:
#       - front_build:
#           name: \"front_build\"
#       - front_deploy:
#           requires:
#             - front_build
#           name: \"front_deploy\"
#   # deploy:
#   #   jobs:
#   #     - build_and_push_image_backend_nginx:
#   #         name: \"build_and_push_image_backend_nginx\"
#   #     - build_and_push_image_backend_php:
#   #         name: \"build_and_push_image_backend_php\"
#   #     # - front_build:
#   #     # - front_deploy:
#   #     - aws-ecs/deploy-service-update:
#   #         requires:
#   #           - build_and_push_image_backend_nginx
#   #           - build_and_push_image_backend_php
#   #         family: \"portfolio_task\"
#   #         service-name: \"portfolio\"
#   #         cluster-name: \"portfolio-cluster\"
#   #         container-image-name-updates: \"container=portfolio_nginx,tag=${CIRCLE_SHA1}\"
#   #         # filters:
#   #         #   branches:
#   #         #     only: main
#   #     - aws-ecs/deploy-service-update:
#   #         requires:
#   #           - build_and_push_image_backend_nginx
#   #           - build_and_push_image_backend_php
#   #         family: \"portfolio_task\"
#   #         service-name: \"portfolio\"
#   #         cluster-name: \"portfolio-cluster\"
#   #         container-image-name-updates: \"container=portfolio_php,tag=${CIRCLE_SHA1}\"
#   #         # filters:
#   #         #   branches:
#   #         #     only: main